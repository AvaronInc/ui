
import React, { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Search, Filter, AlertTriangle, Calendar, ArrowUpDown, Bug, Database, Eye } from 'lucide-react';
import { useExploitData } from './hooks/useExploitData';

const ExploitRepository = () => {
  const { exploits, categories, years } = useExploitData();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [selectedYear, setSelectedYear] = useState<number | null>(null);
  const [sortCriteria, setSortCriteria] = useState<'newest' | 'severity'>('newest');
  
  const filteredExploits = exploits.filter(exploit => {
    const matchesSearch = !searchTerm || 
      exploit.cve.toLowerCase().includes(searchTerm.toLowerCase()) ||
      exploit.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      exploit.description.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = !selectedCategory || exploit.category === selectedCategory;
    const matchesYear = !selectedYear || new Date(exploit.published).getFullYear() === selectedYear;
    
    return matchesSearch && matchesCategory && matchesYear;
  });
  
  const sortedExploits = [...filteredExploits].sort((a, b) => {
    if (sortCriteria === 'newest') {
      return new Date(b.published).getTime() - new Date(a.published).getTime();
    } else { // severity
      const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };
      return severityOrder[b.severity] - severityOrder[a.severity];
    }
  });
  
  const getSeverityBadge = (severity: 'critical' | 'high' | 'medium' | 'low') => {
    const classes = {
      critical: 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',
      high: 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300',
      medium: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300',
      low: 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
    };
    
    return (
      <Badge variant="outline" className={classes[severity]}>
        {severity.charAt(0).toUpperCase() + severity.slice(1)}
      </Badge>
    );
  };
  
  return (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-grow">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search CVEs, exploits, affected systems..."
            className="pl-9"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            className="h-10 px-3 flex items-center gap-1.5 shrink-0"
            onClick={() => setSortCriteria(sortCriteria === 'newest' ? 'severity' : 'newest')}
          >
            <ArrowUpDown className="h-4 w-4" />
            Sort by {sortCriteria === 'newest' ? 'Severity' : 'Newest'}
          </Button>
          <Button 
            variant="outline" 
            className="h-10 px-3 flex items-center gap-1.5 shrink-0"
            onClick={() => {
              setSearchTerm('');
              setSelectedCategory(null);
              setSelectedYear(null);
            }}
          >
            <Filter className="h-4 w-4" />
            Reset Filters
          </Button>
        </div>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-12 gap-4">
        <div className="lg:col-span-3 space-y-4">
          <Card>
            <CardContent className="p-4">
              <Tabs defaultValue="category" className="w-full">
                <TabsList className="w-full grid grid-cols-2">
                  <TabsTrigger value="category">By Category</TabsTrigger>
                  <TabsTrigger value="year">By Year</TabsTrigger>
                </TabsList>
                
                <div className="mt-3">
                  {/* Categories Tab */}
                  <div className={selectedCategory === null ? 'block' : 'hidden'}>
                    <ScrollArea className="h-[300px] pr-3">
                      <div className="space-y-1">
                        {categories.map(category => (
                          <Button
                            key={category.id}
                            variant="ghost"
                            size="sm"
                            className="w-full justify-start"
                            onClick={() => setSelectedCategory(category.id)}
                          >
                            <div className="flex items-center gap-2">
                              {category.icon}
                              <span>{category.name}</span>
                            </div>
                            <Badge variant="outline" className="ml-auto">
                              {exploits.filter(e => e.category === category.id).length}
                            </Badge>
                          </Button>
                        ))}
                      </div>
                    </ScrollArea>
                  </div>
                  
                  {/* Selected Category */}
                  {selectedCategory && (
                    <div>
                      <div className="flex items-center justify-between mb-3">
                        <div className="text-sm font-medium flex items-center gap-2">
                          {categories.find(c => c.id === selectedCategory)?.icon}
                          {categories.find(c => c.id === selectedCategory)?.name}
                        </div>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-7 px-2"
                          onClick={() => setSelectedCategory(null)}
                        >
                          Clear
                        </Button>
                      </div>
                      <div className="text-xs text-muted-foreground">
                        {categories.find(c => c.id === selectedCategory)?.description}
                      </div>
                    </div>
                  )}
                  
                  {/* Years Tab */}
                  <div className={selectedYear === null ? 'block' : 'hidden'}>
                    <ScrollArea className="h-[300px] pr-3">
                      <div className="space-y-1">
                        {years.map(year => (
                          <Button
                            key={year}
                            variant="ghost"
                            size="sm"
                            className="w-full justify-start"
                            onClick={() => setSelectedYear(year)}
                          >
                            <Calendar className="h-4 w-4 mr-2" />
                            <span>{year}</span>
                            <Badge variant="outline" className="ml-auto">
                              {exploits.filter(e => new Date(e.published).getFullYear() === year).length}
                            </Badge>
                          </Button>
                        ))}
                      </div>
                    </ScrollArea>
                  </div>
                  
                  {/* Selected Year */}
                  {selectedYear && (
                    <div>
                      <div className="flex items-center justify-between mb-3">
                        <div className="text-sm font-medium flex items-center gap-2">
                          <Calendar className="h-4 w-4" />
                          {selectedYear}
                        </div>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-7 px-2"
                          onClick={() => setSelectedYear(null)}
                        >
                          Clear
                        </Button>
                      </div>
                      <div className="text-xs text-muted-foreground">
                        Exploits published in {selectedYear}
                      </div>
                    </div>
                  )}
                </div>
              </Tabs>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="text-sm font-medium mb-2">Severity Breakdown</div>
              <div className="space-y-3">
                <div>
                  {['critical', 'high', 'medium', 'low'].map((severity) => {
                    const count = exploits.filter(e => e.severity === severity).length;
                    const percentage = Math.round((count / exploits.length) * 100);
                    return (
                      <div key={severity} className="mb-2">
                        <div className="flex justify-between text-xs mb-1">
                          <span className="capitalize">{severity}</span>
                          <span>{count} ({percentage}%)</span>
                        </div>
                        <div className="w-full h-2 bg-secondary/20 rounded-full overflow-hidden">
                          <div 
                            className={`h-full rounded-full ${
                              severity === 'critical' ? 'bg-red-500' :
                              severity === 'high' ? 'bg-orange-500' :
                              severity === 'medium' ? 'bg-yellow-500' :
                              'bg-blue-500'
                            }`}
                            style={{ width: `${percentage}%` }}
                          />
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
        
        <div className="lg:col-span-9">
          <Card>
            <CardContent className="p-4">
              <div className="flex justify-between items-center mb-4">
                <div className="text-sm font-medium">
                  Exploits & Vulnerabilities ({sortedExploits.length})
                </div>
                <div className="flex gap-2">
                  {selectedCategory && (
                    <Badge variant="outline" className="bg-primary/10 flex items-center gap-1">
                      {categories.find(c => c.id === selectedCategory)?.icon}
                      {categories.find(c => c.id === selectedCategory)?.name}
                    </Badge>
                  )}
                  {selectedYear && (
                    <Badge variant="outline" className="bg-primary/10 flex items-center gap-1">
                      <Calendar className="h-3 w-3" />
                      {selectedYear}
                    </Badge>
                  )}
                </div>
              </div>
              
              <ScrollArea className="h-[500px] pr-3">
                <div className="space-y-3">
                  {sortedExploits.length > 0 ? (
                    sortedExploits.map(exploit => (
                      <Card key={exploit.id} className="border border-accent">
                        <CardContent className="p-3">
                          <div className="grid grid-cols-1 lg:grid-cols-12 gap-4">
                            <div className="lg:col-span-8">
                              <div className="flex items-center gap-2 mb-1">
                                <Badge variant="outline" className="font-mono bg-destructive/10">
                                  {exploit.cve}
                                </Badge>
                                {getSeverityBadge(exploit.severity)}
                              </div>
                              <div className="text-sm font-medium mb-1.5">{exploit.title}</div>
                              <div className="text-xs text-muted-foreground mb-2">{exploit.description}</div>
                              
                              <div className="flex flex-wrap gap-2">
                                <div className="text-xs bg-muted rounded-md px-2 py-1 flex items-center gap-1">
                                  <Database className="h-3 w-3" />
                                  <span>{categories.find(c => c.id === exploit.category)?.name}</span>
                                </div>
                                <div className="text-xs bg-muted rounded-md px-2 py-1 flex items-center gap-1">
                                  <Calendar className="h-3 w-3" />
                                  <span>{new Date(exploit.published).toLocaleDateString()}</span>
                                </div>
                              </div>
                            </div>
                            
                            <div className="lg:col-span-4">
                              <div>
                                <div className="text-xs font-medium text-muted-foreground mb-1">Affected Systems</div>
                                <div className="flex flex-wrap gap-1 mb-3">
                                  {exploit.affectedSystems.map((system, index) => (
                                    <Badge key={index} variant="outline" className="bg-muted">
                                      {system}
                                    </Badge>
                                  ))}
                                </div>
                                
                                <div className="text-xs font-medium text-muted-foreground mb-1">Used By APTs</div>
                                {exploit.usedByApts.length > 0 ? (
                                  <div className="flex flex-wrap gap-1 mb-3">
                                    {exploit.usedByApts.map((apt, index) => (
                                      <Badge key={index} variant="outline" className="bg-secondary/10">
                                        {apt}
                                      </Badge>
                                    ))}
                                  </div>
                                ) : (
                                  <div className="text-xs text-muted-foreground italic mb-3">No known APT usage</div>
                                )}
                                
                                <div className="flex justify-end gap-2">
                                  <Button size="sm" variant="outline" className="text-xs flex items-center gap-1">
                                    <Eye className="h-3 w-3" />
                                    Details
                                  </Button>
                                  {exploit.mitigationAvailable && (
                                    <Button size="sm" className="text-xs">Mitigation</Button>
                                  )}
                                </div>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))
                  ) : (
                    <div className="text-center py-8 text-muted-foreground">
                      No exploits found matching your search criteria.
                    </div>
                  )}
                </div>
              </ScrollArea>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default ExploitRepository;
